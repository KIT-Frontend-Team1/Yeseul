

1. FLUX 패턴에 대하여 설명해보세요
    : 단방향 데이터 흐름으로 애플리케이션을 만드는 아키텍쳐 패턴이다.
      이 패턴은 웹앱 구조가 복잡해짐에 따라 MVC 패턴(양방향 흐름)으로는 에러와 데이터 추적이 어려운 한계가 있었기 때문에 데이터 흐름의 복잡도를 줄이기 위해 페이스북 meta 팀에서 만든 패턴이다.
    action - dispatcher - model - view의 방향으로 흐르는데,

    1) action은 데이터를 변경하는 행위로, type과 payload값을 가진다.
    type은 데이터가 어떤 타입인지 알수있는 key이고,
    payload는 dispatcher를 통해 store에 전달할 실질 데이터라고 할 수 있다.

    ex)
    {
        type: "ADD_USER",
        payload: {
            "name": "Kim",
            "age": 50,
        }
    }

    2) dispatcher는 모든 데이터의 흐름을 관리하는 허브이자 전달 매개체이다.
    dispatcher에는 store들이 등록해놓은 action type 마다 callback 함수가 존재한다. action에 전달하여 store의 callback 함수를 실행하게 된다.

    3) store는 쉽게 말해 저장고이다. 전역으로 사용 가능한 데이터 및 데이터 변경 로직이 저장된다.

    4) view

2. 아래의 hook 함수는 각각 어느 순간에 사용할까요
    (1) useReducer
        : state 업데이트 로직을 외부 파일로 빼내어 재사용하기 위해 사용.(함수를 모듈화하여 사용할 때) 재사용성, 유지보수에 뛰어남
    (2) useContext
        : 전역 상태를 관리할 때.

3. 전역 상태 관리를 해야하는 이유는 무엇일까요

4. 그렇다면 전역 상태 관리는 위 조건에만 부합하면 반드시 수행하는 것이 좋을까요?
   전역 상태 관리를 통해 얻을 수 있는 장단점에 관하여 토의해보세요